security:
    role_hierarchy:
        ROLE_ORGANISER: ROLE_USER

    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            #L'application est sans état (pas de session)
            stateless: true
            json_login:
                #Le nom de la route d'authentification
                check_path: /api/auth
                #La propriété correspondant au login dans notre entité
                username_path: email
                #La propriété correspondant au mot de passe (haché) dans notre entité
                password_path: password
                #Les services qui gèrent le succès ou l'échec d'authentification
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

            entry_point: jwt
            refresh_jwt:
                check_path: api_refresh_token

            logout:
                path: api_token_invalidate
                delete_cookies: ['BEARER']
#            entry_point: jwt
#            refresh_jwt:
#                check_path: api_refresh_token
#            logout:
#                path: api_token_invalidate

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            App\Entity\User:
                algorithm: auto
                cost: 4 # Valeur la plus basse pour bcrypt
                time_cost: 3 # Valeur la plus basse pour argon2id
                memory_cost: 10 # Valeur la plus basse pour argon2id